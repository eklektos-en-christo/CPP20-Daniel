//// Created by Εκλεκτός εν Χριστώ on 27/12/2023.///* * Pointer arithmetic: by incrementing or decrementing the pointer we can move the pointer * forward and backward by the size of the type a pointer points to * * int ptr will move 4 bytes forwards/backwards */#include <iostream>int main(){    int A[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };    // pointing to first element of A    auto* a_ptr{ A };    // pointer arithmetic to access the next element in the array    for (std::size_t i{0}; i < std::size(A); ++i)    {        std::cout << "Addr " << a_ptr + i << " contains : " << *(a_ptr + i) << '\n';    }    std::cout << '\n';    // using the array name and * to access the elements    for (std::size_t i{0}; i < std::size(A); ++i)    {        std::cout << "Addr " << A + i << " contains : " << *(A + i) << '\n';    }    std::cout << '\n';    // printing in reverse using array name    for (std::size_t i{ std::size(A) }; i > 0; --i)    {        std::cout << "Addr " << A + i << " contains : " << *(A + i - 1) << '\n';    }    std::cout << '\n';    // pointing to the last element of the array    a_ptr = A + std::size(A) - 1;    // reverse printing using pointer arithmetic    for (std::size_t i{ std::size(A) }; i > 0; --i)    {        std::cout << "Value : " << *(a_ptr--) << '\n';    }    return 0;}